name: Build Windows Installer

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.1.0)'
        required: false
        default: '1.1.0'

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'src/SheetAtlas.UI.Avalonia/SheetAtlas.UI.Avalonia.csproj'
  BUILD_CONFIGURATION: 'Release'

jobs:
  build-windows-installer:
    name: Build Windows Installer
    runs-on: windows-latest

    steps:
      # ============================================
      # Checkout
      # ============================================
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ============================================
      # Setup .NET
      # ============================================
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Display .NET version
        run: dotnet --version

      # ============================================
      # Restore Dependencies
      # ============================================
      - name: Restore NuGet packages
        run: dotnet restore

      # ============================================
      # Build Self-Contained Application
      # ============================================
      - name: Publish Windows x64 self-contained
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} `
            --configuration ${{ env.BUILD_CONFIGURATION }} `
            --runtime win-x64 `
            --self-contained true `
            --output build/publish/windows-x64 `
            /p:PublishSingleFile=false `
            /p:PublishReadyToRun=true `
            /p:PublishTrimmed=true `
            /p:TrimMode=partial `
            /p:IncludeNativeLibrariesForSelfExtract=true

      - name: Display build output size
        shell: pwsh
        run: |
          $size = (Get-ChildItem build/publish/windows-x64 -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
          Write-Host "Build output size: $($size.ToString('F2')) MB"

      # ============================================
      # Setup Inno Setup
      # ============================================
      - name: Setup Inno Setup
        shell: pwsh
        run: |
          # Download Inno Setup
          $innoUrl = "https://jrsoftware.org/download.php/is.exe"
          $innoInstaller = "$env:TEMP\innosetup.exe"

          Write-Host "Downloading Inno Setup..."
          Invoke-WebRequest -Uri $innoUrl -OutFile $innoInstaller

          Write-Host "Installing Inno Setup..."
          Start-Process -FilePath $innoInstaller -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-" -Wait

          # Add to PATH
          $innoPath = "C:\Program Files (x86)\Inno Setup 6"
          echo "$innoPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          Write-Host "Inno Setup installed"

      # ============================================
      # Build Installer
      # ============================================
      - name: Compile Inno Setup installer
        shell: pwsh
        run: |
          $isccPath = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          $issFile = "build\installer\SheetAtlas-Installer.iss"
          $outputDir = "build\output"

          Write-Host "Compiling installer with Inno Setup..."
          & $isccPath $issFile /O$outputDir /DConfiguration=${{ env.BUILD_CONFIGURATION }} /DNoSign=1

          if ($LASTEXITCODE -ne 0) {
            Write-Error "Inno Setup compilation failed"
            exit 1
          }

          Write-Host "Installer compiled successfully"

      - name: List installer artifacts
        shell: pwsh
        run: |
          Write-Host "Installer artifacts:"
          Get-ChildItem build/output -Filter "*.exe" | ForEach-Object {
            $size = $_.Length / 1MB
            Write-Host "  $($_.Name) - $($size.ToString('F2')) MB"
          }

      # ============================================
      # Upload Artifacts
      # ============================================
      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: SheetAtlas-Windows-Installer
          path: build/output/*.exe
          retention-days: 30
          if-no-files-found: error

      - name: Upload build output artifact
        uses: actions/upload-artifact@v4
        with:
          name: SheetAtlas-Windows-Build
          path: build/publish/windows-x64/**/*
          retention-days: 7

      # ============================================
      # Create Release (on tags)
      # ============================================
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: build/output/*.exe
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================
  # Optional: Build for Linux
  # ============================================
  build-linux:
    name: Build Linux Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Publish Linux x64 self-contained
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --runtime linux-x64 \
            --self-contained true \
            --output build/publish/linux-x64 \
            /p:PublishSingleFile=false \
            /p:PublishReadyToRun=true \
            /p:PublishTrimmed=true \
            /p:TrimMode=partial

      - name: Create tarball
        run: |
          cd build/publish
          tar -czf SheetAtlas-linux-x64.tar.gz linux-x64/
          cd ../..

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: SheetAtlas-Linux-Build
          path: build/publish/SheetAtlas-linux-x64.tar.gz
          retention-days: 30

      - name: Upload to release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: build/publish/SheetAtlas-linux-x64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================
  # Optional: Build for macOS
  # ============================================
  build-macos:
    name: Build macOS Package
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Publish macOS x64 self-contained
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --runtime osx-x64 \
            --self-contained true \
            --output build/publish/osx-x64 \
            /p:PublishSingleFile=false \
            /p:PublishReadyToRun=true \
            /p:PublishTrimmed=true \
            /p:TrimMode=partial

      - name: Create tarball
        run: |
          cd build/publish
          tar -czf SheetAtlas-macos-x64.tar.gz osx-x64/
          cd ../..

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: SheetAtlas-macOS-Build
          path: build/publish/SheetAtlas-macos-x64.tar.gz
          retention-days: 30

      - name: Upload to release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          files: build/publish/SheetAtlas-macos-x64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
