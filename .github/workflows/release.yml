name: Release Pipeline

# ============================================
# Triggers
# ============================================
on:
  push:
    tags:
      - 'v*'  # Triggered on version tags (v0.1.0, v1.0.0, etc.)
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag to build (e.g., v0.3.0)'
        required: true
        type: string

# ============================================
# Permissions
# ============================================
permissions:
  contents: write  # Required to create releases and push to main

# ============================================
# Environment Variables
# ============================================
env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'src/SheetAtlas.UI.Avalonia/SheetAtlas.UI.Avalonia.csproj'
  BUILD_CONFIGURATION: 'Release'

jobs:
  # ============================================
  # BUILD WINDOWS
  # ============================================
  build-windows:
    name: Build Windows Installer
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Publish Windows x64 self-contained
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} `
            --configuration ${{ env.BUILD_CONFIGURATION }} `
            --runtime win-x64 `
            --self-contained true `
            --output build/publish/windows-x64 `
            /p:PublishSingleFile=false `
            /p:PublishReadyToRun=true `
            /p:PublishTrimmed=true `
            /p:TrimMode=partial `
            /p:IncludeNativeLibrariesForSelfExtract=true

      - name: Setup Inno Setup
        shell: pwsh
        run: |
          $innoUrl = "https://jrsoftware.org/download.php/is.exe"
          $innoInstaller = "$env:TEMP\innosetup.exe"

          Write-Host "Downloading Inno Setup..."
          Invoke-WebRequest -Uri $innoUrl -OutFile $innoInstaller

          Write-Host "Installing Inno Setup..."
          Start-Process -FilePath $innoInstaller -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-" -Wait

          $innoPath = "C:\Program Files (x86)\Inno Setup 6"
          echo "$innoPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Write-Host "Inno Setup installed successfully"

      - name: Build Windows Installer
        shell: pwsh
        run: |
          $isccPath = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          $issFile = "build\installer\SheetAtlas-Installer.iss"
          $outputDir = "build\output"

          Write-Host "Compiling installer with Inno Setup..."
          & $isccPath $issFile /O$outputDir /DConfiguration=${{ env.BUILD_CONFIGURATION }} /DNoSign=1

          if ($LASTEXITCODE -ne 0) {
            Write-Error "Inno Setup compilation failed"
            exit 1
          }

          Write-Host "Installer compiled successfully"

      - name: Rename installer to version-agnostic name
        shell: pwsh
        run: |
          # Rename to version-agnostic name for /releases/latest/ compatibility
          Get-ChildItem build/output -Filter "SheetAtlas-Setup-*.exe" |
            Rename-Item -NewName "SheetAtlas-Setup-win-x64.exe"

          Write-Host "Installer renamed to: SheetAtlas-Setup-win-x64.exe"
          $size = (Get-Item "build/output/SheetAtlas-Setup-win-x64.exe").Length / 1MB
          Write-Host "File size: $($size.ToString('F2')) MB"

      - name: Upload Windows installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: build/output/SheetAtlas-Setup-win-x64.exe
          if-no-files-found: error

  # ============================================
  # BUILD LINUX
  # ============================================
  build-linux:
    name: Build Linux Packages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Publish Linux x64 self-contained
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --runtime linux-x64 \
            --self-contained true \
            --output build/publish/linux-x64 \
            /p:PublishSingleFile=false \
            /p:PublishReadyToRun=true \
            /p:PublishTrimmed=true \
            /p:TrimMode=partial

      - name: Create tarball
        run: |
          cd build/publish/linux-x64
          tar -czf ../../../SheetAtlas-linux-x64.tar.gz .
          cd ../../..

          echo "Tarball created:"
          ls -lh SheetAtlas-linux-x64.tar.gz

      - name: Create .deb package
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION_NUMBER="${VERSION#v}"  # Remove 'v' prefix

          # Create Debian package structure
          mkdir -p deb-package/DEBIAN
          mkdir -p deb-package/opt/sheetatlas
          mkdir -p deb-package/usr/share/applications
          mkdir -p deb-package/usr/share/pixmaps

          # Copy application files
          cp -r build/publish/linux-x64/* deb-package/opt/sheetatlas/

          # Create control file
          cat > deb-package/DEBIAN/control <<EOF
          Package: sheetatlas
          Version: ${VERSION_NUMBER}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: SheetAtlas Team <noreply@github.com>
          Description: Excel file comparison and analysis tool
           Search across multiple Excel files and compare matching rows.
           Supports .xlsx, .xls, and CSV formats with advanced search
           capabilities and row-by-row comparison.
          EOF

          # Create .desktop file for application menu
          cat > deb-package/usr/share/applications/sheetatlas.desktop <<EOF
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=SheetAtlas
          Comment=Excel file comparison tool
          Exec=/opt/sheetatlas/SheetAtlas.UI.Avalonia
          Icon=sheetatlas
          Terminal=false
          Categories=Utility;Office;
          EOF

          # Build .deb package
          dpkg-deb --build deb-package SheetAtlas-linux-x64.deb

          echo ".deb package created:"
          dpkg-deb --info SheetAtlas-linux-x64.deb

      - name: Upload Linux tarball
        uses: actions/upload-artifact@v4
        with:
          name: linux-tarball
          path: SheetAtlas-linux-x64.tar.gz
          if-no-files-found: error

      - name: Upload Linux .deb
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: SheetAtlas-linux-x64.deb
          if-no-files-found: error

  # ============================================
  # BUILD MACOS
  # ============================================
  build-macos:
    name: Build macOS Package
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Publish macOS x64 self-contained
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --runtime osx-x64 \
            --self-contained true \
            --output build/publish/osx-x64 \
            /p:PublishSingleFile=false \
            /p:PublishReadyToRun=true \
            /p:PublishTrimmed=true \
            /p:TrimMode=partial

      - name: Create tarball
        run: |
          cd build/publish/osx-x64
          tar -czf ../../../SheetAtlas-macos-x64.tar.gz .
          cd ../../..

          echo "Tarball created:"
          ls -lh SheetAtlas-macos-x64.tar.gz

      - name: Upload macOS tarball
        uses: actions/upload-artifact@v4
        with:
          name: macos-tarball
          path: SheetAtlas-macos-x64.tar.gz
          if-no-files-found: error

  # ============================================
  # CREATE GITHUB RELEASE
  # ============================================
  release:
    name: Create GitHub Release
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifacts structure
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f -exec ls -lh {} \;

      - name: Flatten artifacts directory
        run: |
          # Move all artifacts to root artifacts/ directory
          find artifacts -type f -exec mv {} artifacts/ \;
          # Remove empty subdirectories
          find artifacts -type d -empty -delete

          echo "Flattened artifacts:"
          ls -lh artifacts/

      - name: Detect if prerelease
        id: prerelease
        run: |
          VERSION="${{ github.ref_name }}"
          if [[ "$VERSION" == v0.* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a pre-release (v0.x)"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release (v1.x+)"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release summary
        run: |
          echo "### Release Created Successfully! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ steps.prerelease.outputs.is_prerelease == 'true' && 'Pre-release' || 'Stable' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Artifacts:**" >> $GITHUB_STEP_SUMMARY
          echo "- Windows Installer (.exe)" >> $GITHUB_STEP_SUMMARY
          echo "- Linux Tarball (.tar.gz)" >> $GITHUB_STEP_SUMMARY
          echo "- Linux Debian Package (.deb)" >> $GITHUB_STEP_SUMMARY
          echo "- macOS Tarball (.tar.gz)" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # UPDATE WEBSITE
  # ============================================
  update-website:
    name: Update Website
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main  # Website lives on main branch
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Generate website from template
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION_NUMBER="${VERSION#v}"  # Remove 'v' prefix
          RELEASE_DATE="$(date +%Y-%m-%d)"

          # Determine if this is a prerelease
          if [[ "$VERSION" == v0.* ]]; then
            IS_PRERELEASE="true"
            RELEASE_STATUS_TEXT="Alpha release - Windows and Linux installers available"
            ALPHA_BANNER="            <div style=\"background: #fff3cd; border: 1px solid #ffc107; border-radius: 8px; padding: 16px; margin-bottom: 24px; text-align: center;\"><strong>⚠️ Alpha Software:</strong> This is a pre-release version (${VERSION}). Features are functional but may contain bugs. <a href=\"https://github.com/ghostintheshell-192/sheet-atlas/releases\">View all releases →</a></div>"
          else
            IS_PRERELEASE="false"
            RELEASE_STATUS_TEXT="Stable release - Production ready"
            ALPHA_BANNER=""
          fi

          # Export variables for envsubst
          export VERSION
          export VERSION_NUMBER
          export RELEASE_DATE
          export RELEASE_STATUS_TEXT
          export ALPHA_BANNER

          # Generate index.html and download.html from templates
          envsubst < docs/website/index.html.template > docs/website/index.html
          envsubst < docs/website/download.html.template > docs/website/download.html

          echo "Website generated for version ${VERSION}"
          echo "- VERSION: ${VERSION}"
          echo "- VERSION_NUMBER: ${VERSION_NUMBER}"
          echo "- RELEASE_DATE: ${RELEASE_DATE}"
          echo "- IS_PRERELEASE: ${IS_PRERELEASE}"

      - name: Commit and push website update
        run: |
          git add docs/website/index.html docs/website/download.html

          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "docs: update website for release ${{ github.ref_name }}

          Auto-generated from templates (index.html.template, download.html.template)

          🤖 Generated with [Claude Code](https://claude.com/claude-code)

          Co-Authored-By: Claude <noreply@anthropic.com>"

          git push origin main

          echo "Website updated and pushed to main branch"

      - name: Website update summary
        run: |
          echo "### Website Updated Successfully! 🌐" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The GitHub Pages site will be automatically deployed by the deploy-pages workflow." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://ghostintheshell-192.github.io/sheet-atlas/" >> $GITHUB_STEP_SUMMARY
